{inc (-> :Int :Int)}
(inc 10)
;

{inc (-> :Int :Int),
 x :Str}
(inc x)
;


{inc (-> :Int :Int)}
(inc x)
;


{inc (-> :Int :Int), >0 (-> :Int :Bool)}
(inc (>0 10))
;


{inc (-> :Int :Int)}
[(inc 1) (inc 2)]
;


{= (-> A (-> A :Bool))}
(= 1)
;


{= (-> A (-> A :Bool))}
[(= 1) (= "str")]
;


{inc (-> :Int :Int)}
(inc (dec 1))
;


{}
(dec (dec 1))
;


{inc (-> :Int :Int)}
(lambda x (inc x))
;


{}
((lambda x x) 10)
;


{x :Str, 
 inc (-> :Int :Int),
 concat (-> :Str (-> :Str :Str))}
[(concat x) (lambda x (inc (inc x)))]
;


{head (-> (:List A) A),
 x (:List :Int)}
(head x)
;


{x (:List :Int),
 =0 (-> :Int :Bool)}
[((map inc) x) 
 (=0 (inc 1)) 
 map]
;


{* (-> :Int (-> :Int :Int)), 
 = (-> A (-> A :Bool))}
(let [fact (lambda n (((if ((= n) 1))
						1) 
						((* n) (fact (dec n)))))]
	(fact 10))
;


{dec (-> :Int :Int),
 concat (-> :Str (-> :Str :Str)),
 * (-> :Int (-> :Int :Int))}
(let [times (lambda n 
				(lambda f
					(lambda x
						(f (((times (dec n)) f) x)))))]
 [(((times 2) dec) 10) 
  ((times 5) (concat "a"))
  (lambda times (* times))])
;